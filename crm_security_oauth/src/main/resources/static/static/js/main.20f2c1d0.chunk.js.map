{"version":3,"sources":["../../../crm_exception/frontend/src/logo.svg","../../../crm_exception/frontend/src/component/Home/index.js","../../../crm_exception/frontend/src/component/Home/HomeController.js","../../../crm_exception/frontend/src/component/Contactus/index.js","../../../crm_exception/frontend/src/component/Contactus/ContactusController.js","../../../crm_exception/frontend/src/Routers/index.js","../../../crm_exception/frontend/src/Routers/MainRouter.js","../../../crm_exception/frontend/src/App.js","../../../crm_exception/frontend/src/serviceWorker.js","../../../crm_exception/frontend/src/index.js"],"names":["module","exports","__webpack_require__","p","HomeController","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","inherits","createClass","key","value","react_default","a","createElement","class","react_router_dom","to","className","_this2","fetch","then","response","json","setState","Component","ContactusController","MainRouter","react_router","exact","path","component","App","Routers","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4MCCzBC,ECEf,SAAAC,GACI,SAAAD,EAAYE,GACZ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACIG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAAS,IAHjBR,EAFJ,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,SAAAC,MAAA,WASQ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACXH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACVH,EAAAC,EAAAC,cAAA,oCAECZ,KAAKI,MAAMC,SAGbK,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,gBAAiBC,UAAU,YAArC,mBAlBd,CAAAR,IAAA,oBAAAC,MAAA,WAyBI,IAAAQ,EAAAjB,KACIkB,MAAM,aAAaC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC5CF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CAACjB,QAAQgB,EAAKD,iBA5BxC1B,EAAA,CAAoC6B,aCFrBC,mLCGP,OACId,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACXH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OACTH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACVH,EAAAC,EAAAC,cAAA,kCANkCW,aCDlCE,MCIA,WACX,OACIf,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACDhB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjCgB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWL,OCIhCM,MARf,WACE,OACEpB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACVN,EAAAC,EAAAC,cAACmB,EAAD,QCGWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OACL5B,EAAAC,EAAAC,cAACE,EAAA,EAAD,KAAeJ,EAAAC,EAAAC,cAAC2B,EAAD,OACEC,SAASC,eAAe,SDwHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.20f2c1d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import HomeController from './HomeController';\r\nexport default HomeController;","import React, { Component } from 'react'\r\nimport {  Link } from 'react-router-dom';\r\n\r\nexport class HomeController extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            message :''\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-4\">\r\n               <h3>home controller message \r\n\r\n               {this.state.message} \r\n                   </h3> \r\n             \r\n              <Link to={'/ui/contactus'} className=\"nav-link\">Contact us</Link>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount()\r\n    {\r\n        fetch('/api/home').then(response => response.json())\r\n        .then(json => {\r\n            this.setState({message:json.response});\r\n        })\r\n        \r\n    }\r\n}\r\n\r\nexport default HomeController\r\n","import ContactusController from './ContactusController';\r\nexport default ContactusController;","import React, { Component } from 'react'\r\n\r\nexport default class ContactusController extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n            <div class=\"row\">\r\n              <div class=\"col-sm-4\">\r\n               <h3>Contact us</h3> \r\n            </div>\r\n            </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import MainRouter from './MainRouter';\r\nexport default MainRouter;","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport HomeController from '../component/Home/';\r\nimport ContactusController from '../component/Contactus/';\r\n\r\nexport default function MainRouter() {\r\n    return (\r\n        <div>\r\n         <Switch>\r\n        <Route exact path='/' component={HomeController}/>\r\n        <Route path='/ui/contactus' component={ContactusController}/>\r\n       \r\n      </Switch>   \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MainRouter from './Routers/';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n         <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nReactDOM.render(\n    <BrowserRouter><App />\n   </BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}